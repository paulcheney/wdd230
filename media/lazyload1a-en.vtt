WEBVTT

1
00:00:01.740 --> 00:00:06.420
In this video series we will explore

2
00:00:03.959 --> 00:00:07.859
using the Intersection Observer to lazy

3
00:00:06.420 --> 00:00:09.900
load images.

4
00:00:07.859 --> 00:00:11.700
When someone loads a web page there's a

5
00:00:09.900 --> 00:00:14.099
good chance that it's the wrong page or

6
00:00:11.700 --> 00:00:16.859
they don't want to see the entire page.

7
00:00:14.099 --> 00:00:19.020
If this page has lots of images and we

8
00:00:16.859 --> 00:00:20.939
load them all up front we burn a lot of

9
00:00:19.020 --> 00:00:23.039
data transferring images that will never

10
00:00:20.939 --> 00:00:24.960
be seen.

11
00:00:23.039 --> 00:00:27.300
What needs to happen is that we load the

12
00:00:24.960 --> 00:00:30.180
images at the top of the page,

13
00:00:27.300 --> 00:00:32.399
those that are showing in the viewport,

14
00:00:30.180 --> 00:00:34.620
then we wait for the user to scroll down

15
00:00:32.399 --> 00:00:35.480
to indicate they want to see more of our

16
00:00:34.620 --> 00:00:40.500
page,

17
00:00:35.480 --> 00:00:42.719
then we load the images just in time.

18
00:00:40.500 --> 00:00:45.899
In this example we can see that the page

19
00:00:42.719 --> 00:00:47.940
initially loads with 93 requests.

20
00:00:45.899 --> 00:00:50.840
As we scroll down the page and encounter

21
00:00:47.940 --> 00:00:53.280
more images we see this number increase

22
00:00:50.840 --> 00:00:55.559
and of course the data transferred

23
00:00:53.280 --> 00:00:57.480
increases as well.

24
00:00:55.559 --> 00:00:59.940
On pages that have a large number of

25
00:00:57.480 --> 00:01:02.039
images we can see how this would really

26
00:00:59.940 --> 00:01:05.519
save on data transfer if the user did

27
00:01:02.039 --> 00:01:07.920
not want to see all of these cool images.

28
00:01:05.519 --> 00:01:10.080
For this tutorial I have created eight

29
00:01:07.920 --> 00:01:11.520
images and cropped them all to 300 by

30
00:01:10.080 --> 00:01:14.100
300 pixels.

31
00:01:11.520 --> 00:01:15.119
These jpeg images are compressed at 50

32
00:01:14.100 --> 00:01:18.420
percent

33
00:01:15.119 --> 00:01:21.360
and the sizes are between 40 kilobytes

34
00:01:18.420 --> 00:01:23.280
and 76 kilobytes.

35
00:01:21.360 --> 00:01:27.240
In addition, I created a small

36
00:01:23.280 --> 00:01:28.740
placeholder PNG image that's only 12

37
00:01:27.240 --> 00:01:30.780
kilobytes.

38
00:01:28.740 --> 00:01:32.960
This image will be loaded as a

39
00:01:30.780 --> 00:01:36.420
placeholder for the other eight images

40
00:01:32.960 --> 00:01:37.619
making the initial page load extremely

41
00:01:36.420 --> 00:01:40.259
small.

42
00:01:37.619 --> 00:01:42.840
Then as we scroll down the page the

43
00:01:40.259 --> 00:01:44.939
images are loaded one at a time.

44
00:01:42.840 --> 00:01:47.280
You can see here that only the first

45
00:01:44.939 --> 00:01:49.259
three beach images have been loaded in

46
00:01:47.280 --> 00:01:53.700
our Network tab.

47
00:01:49.259 --> 00:01:55.320
Our transfer data is 175 kilobytes.

48
00:01:53.700 --> 00:01:57.479
After scrolling all the way to the

49
00:01:55.320 --> 00:01:59.880
bottom of the page, all the images have

50
00:01:57.479 --> 00:02:03.840
been loaded and the data transfer has

51
00:01:59.880 --> 00:02:05.579
increased to 427 kilobytes.

52
00:02:03.840 --> 00:02:07.560
I will be demonstrating a simplified

53
00:02:05.579 --> 00:02:10.500
version of the intersection Observer as

54
00:02:07.560 --> 00:02:12.560
found in the mdn documentation.

55
00:02:10.500 --> 00:02:17.459
My goal is that when you are finished,

56
00:02:12.560 --> 00:02:20.640
you can explain every line of code.

57
00:02:17.459 --> 00:02:22.200
The HTML is pretty basic in fact the

58
00:02:20.640 --> 00:02:24.780
only thing that we care about for this

59
00:02:22.200 --> 00:02:26.160
tutorial is line is 14-21 which are

60
00:02:24.780 --> 00:02:28.500
image links.

61
00:02:26.160 --> 00:02:30.900
Notice that I have included the width

62
00:02:28.500 --> 00:02:33.420
and height on these image tags.

63
00:02:30.900 --> 00:02:36.300
This became important in 2019 when

64
00:02:33.420 --> 00:02:39.060
browsers started using these numbers as

65
00:02:36.300 --> 00:02:40.620
a ratio to load a responsive image and

66
00:02:39.060 --> 00:02:43.500
lay out the page.

67
00:02:40.620 --> 00:02:46.379
This prevents page Jank which is where

68
00:02:43.500 --> 00:02:48.660
the contents jump around as the images

69
00:02:46.379 --> 00:02:51.120
are being loaded.

70
00:02:48.660 --> 00:02:53.400
These eight image tags have the same

71
00:02:51.120 --> 00:02:55.200
source, set to display the same

72
00:02:53.400 --> 00:02:57.239
placeholder image.

73
00:02:55.200 --> 00:02:59.640
Each one also has a data source which

74
00:02:57.239 --> 00:03:02.459
does not display in the browser

75
00:02:59.640 --> 00:03:06.260
when this page loads initially it will

76
00:03:02.459 --> 00:03:06.260
show eight placeholder images.

77
00:03:06.540 --> 00:03:10.620
The first task of our JavaScript is to

78
00:03:08.640 --> 00:03:13.500
create a custom variable that contains a

79
00:03:10.620 --> 00:03:15.540
list of all the image tags that have an

80
00:03:13.500 --> 00:03:18.659
attribute of data source.

81
00:03:15.540 --> 00:03:21.060
We will use QuerySelectorAll to get

82
00:03:18.659 --> 00:03:23.040
the matches on the page. If we render

83
00:03:21.060 --> 00:03:24.959
this list to the console it looks like

84
00:03:23.040 --> 00:03:26.940
this.

85
00:03:24.959 --> 00:03:28.800
I've divided this script into five

86
00:03:26.940 --> 00:03:31.200
sections in hopes that we can review

87
00:03:28.800 --> 00:03:32.879
each one and you'll better understand

88
00:03:31.200 --> 00:03:35.099
how they work together.

89
00:03:32.879 --> 00:03:37.440
We've just reviewed the purpose of line

90
00:03:35.099 --> 00:03:39.180
one now, let's look at the rest of the

91
00:03:37.440 --> 00:03:41.340
script.

92
00:03:39.180 --> 00:03:43.440
Lines 9 through 15 are the heart of the

93
00:03:41.340 --> 00:03:45.540
Intersection Observer. It can be

94
00:03:43.440 --> 00:03:47.580
configured to report how elements

95
00:03:45.540 --> 00:03:50.400
interact with each other

96
00:03:47.580 --> 00:03:52.620
and we do that in a configuration... here

97
00:03:50.400 --> 00:03:53.940
on line three through seven. These

98
00:03:52.620 --> 00:03:56.220
options are then fed into the

99
00:03:53.940 --> 00:03:57.959
Intersection Observer as options down

100
00:03:56.220 --> 00:04:00.000
here on line 15.

101
00:03:57.959 --> 00:04:01.920
We will demonstrate what each one of

102
00:04:00.000 --> 00:04:03.420
these does when we look at some example

103
00:04:01.920 --> 00:04:06.780
code.

104
00:04:03.420 --> 00:04:10.200
Line 23 takes my list of images and

105
00:04:06.780 --> 00:04:12.780
feeds each one into my Observer so that

106
00:04:10.200 --> 00:04:14.700
each one can be tracked. In this example

107
00:04:12.780 --> 00:04:16.380
there will be eight image tags being

108
00:04:14.700 --> 00:04:18.720
watched,

109
00:04:16.380 --> 00:04:20.519
Lines 10 through 14 loops through each of

110
00:04:18.720 --> 00:04:23.340
the items being tracked.

111
00:04:20.519 --> 00:04:26.340
If it finds an item that is intersecting,

112
00:04:23.340 --> 00:04:28.919
which means it has entered or exited the

113
00:04:26.340 --> 00:04:32.639
viewport, then it calls the 'load image'

114
00:04:28.919 --> 00:04:35.460
function down here on line 17-21.

115
00:04:32.639 --> 00:04:39.180
The load image function, line 17, then

116
00:04:35.460 --> 00:04:42.180
sets the image source to the path used

117
00:04:39.180 --> 00:04:45.180
in the data source which we can see up

118
00:04:42.180 --> 00:04:46.979
here in the HTML.

119
00:04:45.180 --> 00:04:49.620
Now that the image source has the

120
00:04:46.979 --> 00:04:52.139
correct path to a real image, we no

121
00:04:49.620 --> 00:04:54.000
longer need the data source. So line 20

122
00:04:52.139 --> 00:04:55.199
removes the data source from the image

123
00:04:54.000 --> 00:04:57.060
tag.

124
00:04:55.199 --> 00:04:58.860
Now that the image has loaded we no

125
00:04:57.060 --> 00:05:01.919
longer need to watch to see if that one

126
00:04:58.860 --> 00:05:04.380
comes into view, so line 21 tells the

127
00:05:01.919 --> 00:05:06.720
Intersection Observer not to watch that

128
00:05:04.380 --> 00:05:08.699
particular image tag anymore.

129
00:05:06.720 --> 00:05:10.919
That's all there is to it!

130
00:05:08.699 --> 00:05:12.660
Now let's jump into a code editor and

131
00:05:10.919 --> 00:05:15.259
look at each of these sections in

132
00:05:12.660 --> 00:05:15.259
operation.

